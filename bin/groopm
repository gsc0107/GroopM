#!/usr/bin/env python
###############################################################################
#                                                                             #
#    groopm                                                                   #
#                                                                             #
#    Entry point. See groopm/groopm.py for internals                          #
#                                                                             #
#    Copyright (C) Michael Imelfort                                           #
#                                                                             #
###############################################################################
#                                                                             #
#          .d8888b.                                    888b     d888          #
#         d88P  Y88b                                   8888b   d8888          #
#         888    888                                   88888b.d88888          #
#         888        888d888 .d88b.   .d88b.  88888b.  888Y88888P888          #
#         888  88888 888P"  d88""88b d88""88b 888 "88b 888 Y888P 888          #
#         888    888 888    888  888 888  888 888  888 888  Y8P  888          #
#         Y88b  d88P 888    Y88..88P Y88..88P 888 d88P 888   "   888          #
#          "Y8888P88 888     "Y88P"   "Y88P"  88888P"  888       888          #
#                                             888                             #
#                                             888                             #
#                                             888                             #
#                                                                             #
###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__author__ = "Michael Imelfort"
__copyright__ = "Copyright 2012-2014"
__credits__ = ["Michael Imelfort", "Tim Lamberton"]
__license__ = "GPL3"
__maintainer__ = "Tim Lamberton"
__email__ = "t.lamberton@uq.edu.au"
__status__ = "Development"

###############################################################################

import argparse
import sys
from groopm import subcommands, __version__

###############################################################################
###############################################################################
###############################################################################
###############################################################################

class PrintAction(argparse.Action):
    def __init__(self, option_strings, dest, nargs=None, format=None, **kwargs):
        self.format = format
        argparse.Action.__init__(self, option_strings, dest, nargs=0, **kwargs)

    def __call__(self, parser, *_args):
        print self.format()

        parser.exit(1)


class GMSubparsersGroup:
    def __init__(self, title, subparsers):
        self._subparsers = subparsers
        self._subcommands = []
        self._title = title

    def add_parser(self, name, description="", **kwargs):
        parser = self._subparsers.add_parser(name,
                                            description=description,
                                            **kwargs)
        self._subcommands.append((name, description))

        return parser

    def format_help(self):
        lines = ["    {0}:\n".format(self._title)]
        for (name, description) in self._subcommands:
            lines.append("    groopm {0:<13}-> {1}".format(name, description))

        return "\n".join(lines)


class GMArgumentParser:
    def __init__(self):
        self._parser = argparse.ArgumentParser(add_help=False)
        self._parser.add_argument('-h', '--help', action=PrintAction, format=self.format_help)
        self._parser.add_argument('-v', '--version', action="version",
            version="GroopM: version %s %s %s" % (__version__, __copyright__, __author__))

        self._subparsers = self._parser.add_subparsers()
        self._main_subparsers_group = GMSubparsersGroup("Typical workflow", self._subparsers)
        self._subparsers_groups = []

    def parse_args(self, *args, **kwargs):
        return self._parser.parse_args(*args, **kwargs)

    def add_parser(self, *args, **kwargs):
        return self._main_subparsers_group.add_parser(*args, **kwargs)

    def add_subparsers_group(self, title):
        subparsers_group = GMSubparsersGroup(title, self._subparsers)
        self._subparsers_groups.append(subparsers_group)
        return subparsers_group

    def format_help(self):
        lines = ['''\

                             ...::: GroopM :::...

                     Automagical metagenomic binning FTW!

   -------------------------------------------------------------------------
                                  version: %s
   -------------------------------------------------------------------------
''' % __version__,
                self._main_subparsers_group.format_help()]
        if len(self._subparsers_groups) > 0:
            lines.append('''\

    Extra features:
''')
            for grp in self._subparsers_groups:
                lines.append('''\
        %s
''' % grp.format_help())

            lines.append('''\
    USE: groopm OPTION -h to see detailed options
''')

        return "\n".join(lines)



if __name__ == '__main__':

    ##################################################
    # intialise the options parser
    ##################################################

    parser = GMArgumentParser()

    ##################################################
    # workflow subcommands
    ##################################################

    parse = subcommands.ParseSubcommand()
    parse.add_subparser_to(parser)

    core = subcommands.CoreSubcommand()
    core.add_subparser_to(parser)

    extract = subcommands.ExtractSubcommand()
    extract.add_subparser_to(parser)

    ##################################################
    # utilities subcommands
    ##################################################

    utilities_subparsers = parser.add_subparsers_group(title="Utilities")

    merge = subcommands.MergeSubcommand()
    merge.add_subparser_to(utilities_subparsers)

    delete = subcommands.DeleteSubcommand()
    delete.add_subparser_to(utilities_subparsers)

    ##################################################
    # import/export subcommands
    ##################################################

    import_export_subparsers = parser.add_subparsers_group(title="Import, Export")
    #import_export_subparsers = subparsers

    dump = subcommands.DumpSubcommand()
    dump.add_subparser_to(import_export_subparsers)

    ##################################################
    # System
    ##################################################

    args = parser.parse_args()

    #-------------------------------------------------
    # do what we came here to do
    try:
        if(False):
            import cProfile
            cProfile.run('args.parse(args)', 'prof')
            ##########################################
            ##########################################
            # Use this in python console!
            #import pstats
            #p = pstats.Stats('prof')
            #p.sort_stats('cumulative').print_stats(10)
            #p.sort_stats('time').print_stats(10)
            ##########################################
            ##########################################
        else:
            args.parse(args)
    except:
        print "Unexpected error:", sys.exc_info()[0]
        raise

###############################################################################
###############################################################################
###############################################################################
###############################################################################

