#!/usr/bin/env python
###############################################################################
#                                                                             #
#    groopm                                                                   #
#                                                                             #
#    Entry point. See groopm/groopm.py for internals                          #
#                                                                             #
#    Copyright (C) Michael Imelfort                                           #
#                                                                             #
###############################################################################
#                                                                             #
#          .d8888b.                                    888b     d888          #
#         d88P  Y88b                                   8888b   d8888          #
#         888    888                                   88888b.d88888          #
#         888        888d888 .d88b.   .d88b.  88888b.  888Y88888P888          #
#         888  88888 888P"  d88""88b d88""88b 888 "88b 888 Y888P 888          #
#         888    888 888    888  888 888  888 888  888 888  Y8P  888          #
#         Y88b  d88P 888    Y88..88P Y88..88P 888 d88P 888   "   888          #
#          "Y8888P88 888     "Y88P"   "Y88P"  88888P"  888       888          #
#                                             888                             #
#                                             888                             #
#                                             888                             #
#                                                                             #
###############################################################################
#                                                                             #
#    This program is free software: you can redistribute it and/or modify     #
#    it under the terms of the GNU General Public License as published by     #
#    the Free Software Foundation, either version 3 of the License, or        #
#    (at your option) any later version.                                      #
#                                                                             #
#    This program is distributed in the hope that it will be useful,          #
#    but WITHOUT ANY WARRANTY; without even the implied warranty of           #
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            #
#    GNU General Public License for more details.                             #
#                                                                             #
#    You should have received a copy of the GNU General Public License        #
#    along with this program. If not, see <http://www.gnu.org/licenses/>.     #
#                                                                             #
###############################################################################

__author__ = "Michael Imelfort"
__copyright__ = "Copyright 2012-2014"
__credits__ = ["Michael Imelfort", "Tim Lamberton"]
__license__ = "GPL3"
__version__ = "2.0.0"
__maintainer__ = "Tim Lamberton"
__email__ = "t.lamberton@uq.edu.au"
__status__ = "Development"

###############################################################################

import argparse
import sys
import subcommands

###############################################################################
###############################################################################
###############################################################################
###############################################################################

class GMOptions:
    def __init__(self):
        self.GMVersion = __version__

if __name__ == '__main__':

    ##################################################
    # intialise the options parser
    ##################################################

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='''\

                                 ...::: GroopM :::...

                         Automagical metagenomic binning FTW!

       -------------------------------------------------------------------------
                                      version: %s
       -------------------------------------------------------------------------
       ''' % __version__,
        epilog="USE: groopm OPTION -h to see detailed options"
        )
    parser.add_argument('-v', '--version', action="version",
            version="GroopM: version %s %s %s" % (__version__, __copyright__, __author__))

    ##################################################
    # workflow subcommands
    ##################################################

    workflow_subparsers = parser.add_subparsers(title="Typical workflow")

    parse = subcommands.ParseSubcommand()
    parse.add_subparser_to(workflow_subparsers)

    core = subcommands.CoreSubcommand()
    core.add_subparser_to(workflow_subparsers)

    extract = subcommands.ExtractSubcommand()
    extract.add_subparser_to(workflow_subparsers)

    ##################################################
    # utilities subcommands
    ##################################################

    utilities_subparsers = parser.add_subparsers(title="Utilities")

    merge = subcommands.MergeSubcommand()
    merge.add_subparser_to(utilities_subparsers)

    delete = subcommands.DeleteSubcommand()
    delete.add_subparser_to(utilities_subparsers)

    ##################################################
    # import/export subcommands
    ##################################################

    import_export_subparsers = parser.add_subparsers(title="Import, Export")

    dump = subcommands.DumpSubcommand()
    dump.add_subparser_to(import_export_subparsers)

    ##################################################
    # System
    ##################################################

    args = parser.parse_args(namespace=GMOptions())

    #-------------------------------------------------
    # do what we came here to do
    try:
        if(False):
            import cProfile
            cProfile.run('args.parse(args)', 'prof')
            ##########################################
            ##########################################
            # Use this in python console!
            #import pstats
            #p = pstats.Stats('prof')
            #p.sort_stats('cumulative').print_stats(10)
            #p.sort_stats('time').print_stats(10)
            ##########################################
            ##########################################
        else:
            args.parse(args)
    except:
        print "Unexpected error:", sys.exc_info()[0]
        raise

###############################################################################
###############################################################################
###############################################################################
###############################################################################

